#include <ESP8266WiFi.h>
#include <Adafruit_MQTT.h>
#include <Adafruit_MQTT_Client.h>

// Define pins
#define Buzzer D2
#define Sensor D0

// WiFi settings
const char* ssid = "DELL 5575";
const char* password = "Jiban123";

// Adafruit IO settings
#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME    "***z"    // Replace with your Adafruit IO username
#define AIO_KEY         "a****g"         // Replace with your Adafruit IO key

// Create an ESP8266 WiFiClient class to connect to the MQTT server.
WiFiClient client;

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

// Setup feeds
Adafruit_MQTT_Publish fireFeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/fire");

void setup() {
  Serial.begin(115200);
  pinMode(Sensor, INPUT);
  pinMode(Buzzer, OUTPUT);
  connectToWiFi();
  Serial.println("Setup complete");
}

void loop() {
  // Ensure the connection to the MQTT server is alive
  MQTT_connect();

  int fireDetected = digitalRead(Sensor);
  Serial.print("Sensor value: ");
  Serial.println(fireDetected);

  if (fireDetected == HIGH) { // Adjust this if necessary
    digitalWrite(Buzzer, HIGH); // Activate buzzer
    Serial.println("Fire detected!");
    if (!fireFeed.publish(1)) {
      Serial.println("Failed to send data to Adafruit IO");
    }
  } else {
    digitalWrite(Buzzer, LOW); // Deactivate buzzer
    Serial.println("No fire detected");
    if (!fireFeed.publish(0)) {
      Serial.println("Failed to send data to Adafruit IO");
    }
  }
  delay(10000); // Wait 10 seconds to update again
}

void connectToWiFi() {
  Serial.print("Connecting to WiFi");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("Connected to WiFi");
}

// Function to connect and reconnect as necessary to the MQTT server.
void MQTT_connect() {
  int8_t ret;

  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }

  Serial.print("Connecting to MQTT... ");

  while ((ret = mqtt.connect()) != 0) { 
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  
  }
  Serial.println("MQTT Connected!");
}
